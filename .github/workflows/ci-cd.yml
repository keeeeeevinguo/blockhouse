# .github/workflows/ci-cd.yml
name: Django CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: 'postgres'
          POSTGRES_USER: 'admin1'
          POSTGRES_PASSWORD: 'password'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Set up the environment variables
      - name: Set environment variables
        run: |
          echo "DATABASE_NAME=django_db" >> $GITHUB_ENV
          echo "DATABASE_USER=django_user" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=your_password" >> $GITHUB_ENV
          echo "DATABASE_HOST=3.145.185.85" >> $GITHUB_ENV
          echo "DATABASE_PORT=5432" >> $GITHUB_ENV
          echo "SECRET_KEY=test_secret_key" >> $GITHUB_ENV

      # Step 5: Wait for PostgreSQL service to be healthy
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h 127.0.0.1 -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      # Step 6: Apply migrations
      - name: Apply migrations
        run: |
          python manage.py makemigrations
          python manage.py migrate

      # Step 7: Run the tests
      - name: Run tests
        run: |
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 4: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: your_dockerhub_username/django-app:latest
          push: true

      # Step 5: Deploy to AWS ECS
      - name: Deploy to AWS ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: your-task-definition.json
          service: your-ecs-service
          cluster: your-ecs-cluster
          wait-for-service-stability: true
